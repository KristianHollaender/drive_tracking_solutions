// Mocks generated by Mockito 5.4.0 from annotations
// in drive_tracking_solutions/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:drive_tracking_solutions/logic/fire_service.dart' as _i3;
import 'package:flutter/src/widgets/navigator.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_1<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_2<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseService extends _i1.Mock implements _i3.FirebaseService {
  @override
  _i2.FirebaseFirestore get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.FirebaseFirestore);
  @override
  set tourId(String? _tourId) => super.noSuchMethod(
        Invocation.setter(
          #tourId,
          _tourId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set pauseId(String? _pauseId) => super.noSuchMethod(
        Invocation.setter(
          #pauseId,
          _pauseId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>?> startTour(
    _i2.GeoPoint? startPoint,
    DateTime? startTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startTour,
          [
            startPoint,
            startTime,
          ],
        ),
        returnValue:
            _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>?>.value(),
        returnValueForMissingStub:
            _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>?>.value(),
      ) as _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>?>);
  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getTourSnapshotStream(
          String? tourId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTourSnapshotStream,
          [tourId],
        ),
        returnValue:
            _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
      ) as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i4.Future<_i2.QuerySnapshot<Object?>> getAllTours(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTours,
          [uid],
        ),
        returnValue: _i4.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #getAllTours,
            [uid],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #getAllTours,
            [uid],
          ),
        )),
      ) as _i4.Future<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> getTourByID(
          String? tourId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTourByID,
          [tourId],
        ),
        returnValue:
            _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                _FakeDocumentSnapshot_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getTourByID,
            [tourId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                _FakeDocumentSnapshot_2<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getTourByID,
            [tourId],
          ),
        )),
      ) as _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);
  @override
  _i4.Future<void> endTour(
    String? id,
    _i2.GeoPoint? endPoint,
    DateTime? endTime,
    String? totalTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #endTour,
          [
            id,
            endPoint,
            endTime,
            totalTime,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> addNote(
    String? id,
    String? note,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNote,
          [
            id,
            note,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<String?> startPause(
    String? id,
    DateTime? pauseStartTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startPause,
          [
            id,
            pauseStartTime,
          ],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
  @override
  _i4.Future<_i2.QuerySnapshot<Object?>> getPauseFromTour(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPauseFromTour,
          [id],
        ),
        returnValue: _i4.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #getPauseFromTour,
            [id],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #getPauseFromTour,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.QuerySnapshot<Object?>>);
  @override
  _i4.Future<void> stopPause(
    String? tourId,
    String? pauseId,
    DateTime? pauseEndTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopPause,
          [
            tourId,
            pauseId,
            pauseEndTime,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> signUp(
    String? email,
    String? password,
    String? firstname,
    String? lastname,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            firstname,
            lastname,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> resetPassword(String? email) => (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.DocumentSnapshot<Object>>? getUserById(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [uid],
        ),
        returnValueForMissingStub: null,
      ) as _i4.Future<_i2.DocumentSnapshot<Object>>?);
  @override
  _i4.Future<void> addCheckpoint(
    String? id,
    _i2.GeoPoint? truckStop,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCheckpoint,
          [
            id,
            truckStop,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.QuerySnapshot<Object?>> getCheckPointFromTour(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCheckPointFromTour,
          [id],
        ),
        returnValue: _i4.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #getCheckPointFromTour,
            [id],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #getCheckPointFromTour,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.QuerySnapshot<Object?>>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i5.NavigatorObserver {
  @override
  void didPush(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i5.Route<dynamic>? newRoute,
    _i5.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i5.Route<dynamic>? route,
    _i5.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
